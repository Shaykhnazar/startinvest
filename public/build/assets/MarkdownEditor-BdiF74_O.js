import{e as c}from"./el-input-LIRYhySf.js";import{p as m,s as p,af as f,y as g,o as h,f as y,b as v}from"./app-PZSealiB.js";const _={class:"markdown-editor-container"},x={__name:"MarkdownEditor",props:{modelValue:{type:String,default:""},placeholder:{type:String,default:"Write your content here..."},autosave:{type:Boolean,default:!0}},emits:["update:modelValue","change"],setup(s,{emit:d}){const t=s,r=d,l=m(null);let e=null;p(()=>{e=new c({element:l.value,initialValue:t.modelValue,placeholder:t.placeholder,spellChecker:!1,status:["lines","words"],autosave:t.autosave?{enabled:!0,uniqueId:"editor-content",delay:1e3}:void 0,toolbar:["bold","italic","strikethrough","heading","code","|","quote","unordered-list","ordered-list","|","link","image","|","preview","side-by-side","fullscreen","|","guide"],uploadImage:!0,imageUploadFunction:i,minHeight:"300px",autofocus:!1,renderingConfig:{codeSyntaxHighlighting:!0,singleLineBreaks:!1},styleSelectedText:!1}),e.codemirror.on("change",()=>{const a=e.value();r("update:modelValue",a),r("change",a)})}),f(()=>{e&&(e.toTextArea(),e=null)}),g(()=>t.modelValue,a=>{e&&a!==e.value()&&e.value(a)});const i=async a=>{try{return new Promise(o=>{const n=new FileReader;n.onload=u=>o(u.target.result),n.readAsDataURL(a)})}catch(o){return console.error("Image upload failed:",o),null}};return(a,o)=>(h(),y("div",_,[v("textarea",{ref_key:"editor",ref:l},null,512)]))}};export{x as _};
